<?php

/**
 * Core functions for the site
 */

/**
 * Get a single setting value from database
 */
function getSetting($key, $default = '') {
    global $pdo;
    
    // Return default if no database connection
    if (!isset($pdo) || !$pdo) {
        return $default;
    }
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("SELECT setting_value FROM settings WHERE setting_key = ? LIMIT 1");
        $stmt->execute([$key]);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        
        return $result ? $result['setting_value'] : $default;
    } catch (PDOException $e) {
        error_log('Error getting setting: ' . $e->getMessage());
        return $default;
    }
}

/**
 * Get all settings as associative array
 */
function getSettings() {
    global $pdo;
    
    // Return defaults if no database connection
    if (!isset($pdo) || !$pdo) {
        return [
            'site_title' => 'Dalthaus Photography',
            'site_motto' => 'Capturing moments, telling stories through light and shadow',
            'header_height' => '200',
            'header_overlay_color' => 'rgba(0,0,0,0.3)',
            'header_text_color' => '#ffffff',
            'maintenance_mode' => '0',
            'maintenance_message' => 'We are currently performing maintenance. Please check back soon.'
        ];
    }
    global $pdo;
    
    try {
        $stmt = $pdo->query("SELECT setting_key, setting_value FROM settings");
        $settings = [];
        
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $settings[$row['setting_key']] = $row['setting_value'];
        }
        
        // Provide defaults if not set
        $defaults = [
            'site_title' => 'Dalthaus Photography',
            'site_motto' => 'Capturing moments, telling stories through light and shadow',
            'header_height' => '200',
            'header_overlay_color' => 'rgba(0,0,0,0.3)',
            'header_text_color' => '#ffffff',
            'maintenance_mode' => '0',
            'maintenance_message' => 'We are currently performing maintenance. Please check back soon.'
        ];
        
        foreach ($defaults as $key => $value) {
            if (!isset($settings[$key])) {
                $settings[$key] = $value;
            }
        }
        
        return $settings;
    } catch (PDOException $e) {
        error_log('Error getting settings: ' . $e->getMessage());
        return [];
    }
}

/**
 * Check if site is in maintenance mode
 */
function isMaintenanceMode() {
    return getSetting('maintenance_mode', '0') === '1';
}

/**
 * Check if current user is admin
 */
function isAdmin() {
    if (session_status() == PHP_SESSION_NONE) {
        session_start();
    }
    return isset($_SESSION['admin_logged_in']) && $_SESSION['admin_logged_in'] === true;
}

/**
 * Validate CSRF token
 */
function validateCSRFToken($token) {
    if (session_status() == PHP_SESSION_NONE) {
        session_start();
    }
    
    if (!isset($_SESSION['csrf_token']) || !$token) {
        return false;
    }
    
    return hash_equals($_SESSION['csrf_token'], $token);
}

/**
 * Generate CSRF token
 */
function generateCSRFToken() {
    if (session_status() == PHP_SESSION_NONE) {
        session_start();
    }
    
    if (!isset($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
    
    return $_SESSION['csrf_token'];
}

/**
 * Sanitize input
 */
function sanitizeInput($input) {
    return htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, 'UTF-8');
}

/**
 * Create URL slug from string
 */
function createSlug($string) {
    // Convert to lowercase
    $slug = strtolower($string);
    
    // Replace spaces with hyphens
    $slug = str_replace(' ', '-', $slug);
    
    // Remove special characters
    $slug = preg_replace('/[^a-z0-9-]/', '', $slug);
    
    // Remove multiple hyphens
    $slug = preg_replace('/- /', '-', $slug);
    
    // Trim hyphens from ends
    $slug = trim($slug, '-');
    
    return $slug;
}

/**
 * Get base URL
 */
function getBaseUrl() {
    $protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';
    $host = $_SERVER['HTTP_HOST'];
    return $protocol . '://' . $host;
}

/**
 * Redirect to URL
 */
function redirect($url) {
    header("Location: " . $url);
    exit();
}

/**
 * Check if request is AJAX
 */
function isAjax() {
    return isset($_SERVER['HTTP_X_REQUESTED_WITH']) && 
           strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest';
}

/**
 * Format date
 */
function formatDate($date, $format = 'F j, Y') {
    return date($format, strtotime($date));
}

/**
 * Get excerpt from text
 */
function getExcerpt($text, $length = 150) {
    $text = strip_tags($text);
    if (strlen($text) <= $length) {
        return $text;
    }
    
    $excerpt = substr($text, 0, $length);
    $lastSpace = strrpos($excerpt, ' ');
    
    if ($lastSpace !== false) {
        $excerpt = substr($excerpt, 0, $lastSpace);
    }
    
    return $excerpt . '...';
}

/**
 * Clear all cache files
 */
function cacheClear() {
    $cacheDir = __DIR__ . '/../cache/';
    
    if (!is_dir($cacheDir)) {
        return true; // No cache directory, nothing to clear
    }
    
    $cleared = 0;
    try {
        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($cacheDir, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::CHILD_FIRST
        );
        
        foreach ($iterator as $file) {
            if ($file->isFile()) {
                // Only clear cache files (not .htaccess or other system files)
                if (preg_match('/\.(cache|tmp|temp)$/i', $file->getFilename()) || 
                    preg_match('/cache_.*\.php$/', $file->getFilename())) {
                    if (unlink($file->getPathname())) {
                        $cleared  ;
                    }
                }
            }
        }
    } catch (Exception $e) {
        error_log("Cache clear error: " . $e->getMessage());
    }
    
    logMessage("Cache cleared: {$cleared} files removed");
    return true;
}

/**
 * Log messages for debugging
 */
function logMessage($message, $level = 'info') {
    $timestamp = date('Y-m-d H:i:s');
    $logEntry = "[{$timestamp}] [{$level}] {$message}" . PHP_EOL;
    
    $logFile = __DIR__ . '/../logs/app.log';
    $logDir = dirname($logFile);
    
    // Create logs directory if it doesn't exist
    if (!is_dir($logDir)) {
        mkdir($logDir, 0755, true);
    }
    
    file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
}
?>